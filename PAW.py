# template for encryption with the ADFGVX cipher
# replace "temp" with your name in the filename.
import string
from playsound import playsound
import time

morseDot = "C:/Users/denia/OneDrive/Desktop/programming1/Cryptography/02sec440Hz.mp3"
morseDash = "C:/Users/denia/OneDrive/Desktop/programming1/Cryptography/06sec440Hz.mp3"

ab = string.ascii_lowercase
dg = string.digits
ws = string.whitespace

morse = {'A':'•−−', 'D':'−••', 'F':'••−•', 'G':'−−•', 'V':'•••−', 'X':'−••−'}

scramble = "ph0qg64mea1yl2nofdxkr3cvs5zw7bj9uti8"

def genDict(scramble):
    # input: scramble is a single string of 36 characters
    # containing the scrambled letters of the alphabet and the 10 digits
    # e.g. "ph0qg64mea1yl2nofdxkr3cvs5zw7bj9uti8"
    # The function returns a dictionary
    # where the keys are the characters of scramble
    # and the values are 2-character strings of letters from ADFGVX
    # e.g. d_sub = {'p':'AA', 'h':'AD', '0':'AF', etc}
    # the pairs of letters are generated by an algorithm, not hard coded
    s = 'ADFGVX'
    d_sub = {}
    row = 0
    for i in range(36):
        # your code goes here...
        d_sub[scramble[i]] = s[row] + s[i%6]
        if (i+1)%6 == 0:
            row += 1

    return d_sub

def genSubStream(pt, d_sub):
    # pt is the string of plaintext characters
    # whitespace and punctuation will be skipped
    # input letters may be lower and uppercase
    # The function outputs a single string of uppercase letters
    # using the dictionary substituting characters with pairs of letters from ADFGVX
    # eg: if pt is "php", ct is "AAADAA"
    ct = ""
    for char in pt:
        if char not in ws:
            if char in dg:
                ct += d_sub[char]
            else:
                ct += d_sub[char.lower()]

    return ct

def genTable(kw, ct):
#     # kw is a string (the keyword)
#     # ct is a string (the output of the genSubStream function)
#     # the function generates a list of strings
#     # corresponding to each row of the table
#     # each row has as many characters as the keyword kw
#     # for the last row, if too short, pad it with Xs
#     # e.g. if kw = "cat", and ct = "ADDAVGFDAF"
#     # then the function returns the list
#     # t_ct = ['ADD', 'AVG', 'FDA', 'FXX']
    t_ct = []
    lengthDifference = len(ct) % len(kw)
    for fontaine in range(6-(lengthDifference)):
        ct += "X"
    cacheStr = ""
    # print("CT:", ct)
    for i in range(len(ct)):
        cacheStr += ct[i]
        if len(cacheStr) == len(kw):
            t_ct.append(cacheStr)
            cacheStr = ""

    return t_ct

def genOrder(kw):
    # returns a list of indexes corresponding to the indexes
    # of the letters of the keyword in ascending alphabetical order
    # for example, if keyword is "cat"
    # the function returns the list l_ind = [1, 0, 2]
    l_ind = []
    indDict = {}
    for i in range(len(kw)):
        indDict[i] = kw[i]
    for char in ab:
        for index in indDict.keys():
            if indDict[index] == char:
                l_ind.append(index)

    return l_ind

def outputCol(l_ind, t_ct):
    # outputs a string
    # t_ct is a list of strings (the rows of the table)
    # l_ind is a list of indexes (the columns to read)
    # the output mimics reading the table by the sorted columns
    # e.g. with l_ind =  [1, 0, 2] and t_ct = ['ADD', 'AVG', 'FDA', 'FXX']
    # the output will be 'DVDXAAFFDGAX'

    ct = ""
    for index in l_ind:
        for row in t_ct:
            ct += row[index]

    return ct

def genMorse(ct):
    # outputs a stream of dots, dashes, and spaces in a single strings
    # ct is a string of ADFGVX letters

    mct = ""
    for char in ct:
        mct += morse[char]

    return mct

def main():
    # asks the user for the Plaintext
    pt = input("\nEnter your plaintext: ")

    # asks the user for the Keyword
    kw = input("\nEnter the keyword: ").lower()

    # print(genOrder(kw))
    # print(genSubStream(pt, genDict(scramble)))
    # print(genTable(kw, genSubStream(pt, genDict(scramble))))
    textOut = outputCol(genOrder(kw), genTable(kw, genSubStream(pt, genDict(scramble))))
    print(genMorse(textOut))

    for char in textOut:
        for ditDah in morse[char]:
            if ditDah == "−":
                playsound(morseDash)
            else:
                playsound(morseDot)
        time.sleep(0.5)
    # do the work...

main()
